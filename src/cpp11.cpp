// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// cycles-r.cpp
writable::list cycles_cpp(list df, strings edge_list, const int start_edge_index, const bool left);
extern "C" SEXP _neighbourhoods_cycles_cpp(SEXP df, SEXP edge_list, SEXP start_edge_index, SEXP left) {
  BEGIN_CPP11
    return cpp11::as_sexp(cycles_cpp(cpp11::as_cpp<cpp11::decay_t<list>>(df), cpp11::as_cpp<cpp11::decay_t<strings>>(edge_list), cpp11::as_cpp<cpp11::decay_t<const int>>(start_edge_index), cpp11::as_cpp<cpp11::decay_t<const bool>>(left)));
  END_CPP11
}
// cycles-r.cpp
writable::logicals cpp_reduce_paths(list edge_list);
extern "C" SEXP _neighbourhoods_cpp_reduce_paths(SEXP edge_list) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_reduce_paths(cpp11::as_cpp<cpp11::decay_t<list>>(edge_list)));
  END_CPP11
}
// expand_edges.cpp
writable::list cpp_expand_edges(const list paths, const list edge_map_in, const bool paths_are_list);
extern "C" SEXP _neighbourhoods_cpp_expand_edges(SEXP paths, SEXP edge_map_in, SEXP paths_are_list) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_expand_edges(cpp11::as_cpp<cpp11::decay_t<const list>>(paths), cpp11::as_cpp<cpp11::decay_t<const list>>(edge_map_in), cpp11::as_cpp<cpp11::decay_t<const bool>>(paths_are_list)));
  END_CPP11
}
// preprocess.cpp
writable::integers cpp_preprocess(list df);
extern "C" SEXP _neighbourhoods_cpp_preprocess(SEXP df) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_preprocess(cpp11::as_cpp<cpp11::decay_t<list>>(df)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_neighbourhoods_cpp_expand_edges", (DL_FUNC) &_neighbourhoods_cpp_expand_edges, 3},
    {"_neighbourhoods_cpp_preprocess",   (DL_FUNC) &_neighbourhoods_cpp_preprocess,   1},
    {"_neighbourhoods_cpp_reduce_paths", (DL_FUNC) &_neighbourhoods_cpp_reduce_paths, 1},
    {"_neighbourhoods_cycles_cpp",       (DL_FUNC) &_neighbourhoods_cycles_cpp,       4},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_neighbourhoods(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
